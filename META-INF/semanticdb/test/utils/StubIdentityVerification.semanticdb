
»XS
ÃŸI_root_.utils.StubIdentityVerification.`journeyResult_=`(Lscala/Tuple2;)V.<
Â	Á	2_root_.java.lang.Object#`==`(Ljava/lang/Object;)Z.[
£•Q_root_.utils.StubIdentityVerification.stubFailedJourney(Ljava/lang/String;)V.(id)
‰Ê
_root_.uk.'
®Ø_root_.org.scalatest.mockito.<
Ü
à
2_root_.java.lang.Object#`==`(Ljava/lang/Object;)Z."
‚	‰	_root_.scala.Tuple2#(_1)I
÷‹?_root_.scala.concurrent.Future.;_root_.scala.concurrent.Future#>
ı	Ç
4_root_.utils.StubIdentityVerification.journeyResult.S
íüI_root_.utils.StubIdentityVerification.`journeyResult_=`(Lscala/Tuple2;)V.1
˛í'_root_.connectors.IdentityVerification#
ûß_root_.org.scalatest.]
®ΩQ_root_.utils.StubIdentityVerification.stubSuccessfulJourney(Ljava/lang/String;)V._
∞ºU_root_.org.scalatest.mockito.MockitoSugar.;_root_.org.scalatest.mockito.MockitoSugar#;
πæ/_root_.utils.StubIdentityVerification.reset()V.ô
˙É	å_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.(journeyId)í
ñ	ò	Ö_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.(hc)(
Ú	Ù	_root_.scala.Boolean#`&&`(Z)Z.ó
Ë	Ò	å_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.(journeyId)]
ÑÜQ_root_.utils.StubIdentityVerification.stubFailedJourney(Ljava/lang/String;)V.(id)
öù_root_.org.
≈ _root_.scala."
À’_root_.scala.concurrent.@
àï4_root_.utils.StubIdentityVerification.journeyResult.
ÎÔ_root_.uk.gov.hmrc.2
ã£&_root_.utils.StubIdentityVerification.é
Ï˘Å_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;."
É
Ö
_root_.scala.Tuple2#(_2)
ÂÍ_root_.utils."
Ù_root_.uk.gov.hmrc.http.
±	∏	_root_.scala.Boolean#
Û˝_root_.connectors.)
™	∞	_root_.scala.concurrent.Future#%
¬»_root_.scala.Predef.String#*
¡” _root_.utils.StubServicesConfig.Y
ÚÉM_root_.utils.StubIdentityVerification.stubFailedJourney(Ljava/lang/String;)V.
ÁÍ_root_.uk.gov.a
æ¿U_root_.utils.StubIdentityVerification.stubSuccessfulJourney(Ljava/lang/String;)V.(id)_
›ﬂU_root_.utils.StubIdentityVerification.stubSuccessfulJourney(Ljava/lang/String;)V.(id)>
‘	·	4_root_.utils.StubIdentityVerification.journeyResult.a
…	”	W_root_.scala.concurrent.Future.successful(Ljava/lang/Object;)Lscala/concurrent/Future;.%
Ö	ã	_root_.scala.Predef.String#4
Íˆ*_root_.org.scalatest.mockito.MockitoSugar#S
√–I_root_.utils.StubIdentityVerification.`journeyResult_=`(Lscala/Tuple2;)V.1
¨¿'_root_.connectors.IdentityVerification#0
ö	ß	&_root_.uk.gov.hmrc.http.HeaderCarrier# 
€„_root_.utils.StubHttp.ñ
¿¿ã_root_.connectors.IdentityVerification#`<init>`(Luk/gov/hmrc/play/config/inject/ServicesConfig;Lconfig/ApplicationConfig;Lconfig/WSHttp;)V.W
ıÇM_root_.uk.gov.hmrc.http.HeaderCarrier.;_root_.uk.gov.hmrc.http.HeaderCarrier#%
àé_root_.scala.Predef.String#)
¬	»	_root_.scala.concurrent.Future."G
_root_.scala.Tuple2#(_2)+Å_2T2"
_root_.scala.Tuple2#[T2]"G
_root_.scala.Tuple2#(_1)+Å_1T1"
_root_.scala.Tuple2#[T1]"'
_root_.connectors.ÄàÄ
connectors"b
/_root_.utils.StubIdentityVerification.reset()V./reset(): Unit"
_root_.scala.Unit#"Q
_root_.scala.Predef.String#2@StringString"
_root_.java.lang.String#"?
*_root_.org.scalatest.mockito.MockitoSugar#Ä@MockitoSugar"˙
W_root_.scala.concurrent.Future.successful(Ljava/lang/Object;)Lscala/concurrent/Future;.û
successful[T] => (result: T): Future[T]"b
Z_root_.scala.concurrent.Future.successful(Ljava/lang/Object;)Lscala/concurrent/Future;.[T]"'
_root_.scala.concurrent.Future#"b
Z_root_.scala.concurrent.Future.successful(Ljava/lang/Object;)Lscala/concurrent/Future;.[T]"'
_root_.uk.gov.hmrc.http.ÄàÄhttp"D
'_root_.connectors.IdentityVerification#Ä IdentityVerification"(
_root_.utils.StubHttp.ÄÑStubHttp"ç
2_root_.java.lang.Object#`==`(Ljava/lang/Object;)Z.WÑÄ==(x$1: Any): Boolean"
	_root_.scala.Any#"
_root_.scala.Boolean#"/
_root_.scala.concurrent.Future.ÄÑFuture"[
!_root_.scala.Boolean#`<init>`()V.6<init>(): Boolean"
_root_.scala.Boolean#".
_root_.scala.concurrent.Future#Ä@Future" 
å_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.(journeyId)9Ä	journeyIdString"!
_root_.scala.Predef.String#"˜
Å_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.verifySuccess@(journeyId: String)(implicit hc: HeaderCarrier): Future[Boolean]"#
_root_.scala.Predef.String#".
!.&_root_.uk.gov.hmrc.http.HeaderCarrier#"'
17_root_.scala.concurrent.Future#"
8?_root_.scala.Boolean#"/
_root_.org.scalatest.mockito.ÄàÄmockito")
_root_.org.scalatest.ÄàÄ	scalatest"≥
ã_root_.connectors.IdentityVerification#`<init>`(Luk/gov/hmrc/play/config/inject/ServicesConfig;Lconfig/ApplicationConfig;Lconfig/WSHttp;)V.¢<init>](serverConfig: ServicesConfig, config: ApplicationConfig, http: WSHttp): IdentityVerification"=
5_root_.uk.gov.hmrc.play.config.inject.ServicesConfig#"(
'8 _root_.config.ApplicationConfig#"
@F_root_.config.WSHttp#"/
I]'_root_.connectors.IdentityVerification#"
_root_.org.
ÄàÄorg"ã
U_root_.utils.StubIdentityVerification.stubSuccessfulJourney(Ljava/lang/String;)V.(id)2ÄidString"!
_root_.scala.Predef.String#"

_root_.uk.	ÄàÄuk"
_root_.uk.gov.
ÄàÄgov"Ò
4_root_.utils.StubIdentityVerification.journeyResult.∏ÇÄjourneyResult_=#(x$1: Tuple2[String, String]): Unit"
_root_.scala.Tuple2#" 
_root_.java.lang.String#" 
_root_.java.lang.String#"
#_root_.scala.Unit#"˜
ô_root_.uk.gov.hmrc.http.HeaderCarrier#`<init>`(Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Ljava/lang/String;JLscala/collection/Seq;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/Option;Lscala/collection/Seq;)V.ÿ<init>¯(authorization: Option[Authorization], userId: Option[UserId], token: Option[Token], forwarded: Option[ForwardedFor], sessionId: Option[SessionId], requestId: Option[RequestId], requestChain: RequestChain, nsStamp: Long, extraHeaders: Seq[Tuple2[String, String]], trueClientIp: Option[String], trueClientPort: Option[String], gaToken: Option[String], gaUserId: Option[String], deviceID: Option[String], akamaiReputation: Option[AkamaiReputation], otherHeaders: Seq[Tuple2[String, String]]): HeaderCarrier"
_root_.scala.Option#"6
$._root_.uk.gov.hmrc.http.logging.Authorization#"
/5_root_.scala.Option#"'
6<_root_.uk.gov.hmrc.http.UserId#"
FL_root_.scala.Option#"&
MR_root_.uk.gov.hmrc.http.Token#"
`f_root_.scala.Option#"5
gs-_root_.uk.gov.hmrc.http.logging.ForwardedFor#"
Åá_root_.scala.Option#"4
àë*_root_.uk.gov.hmrc.http.logging.SessionId#"
ü•_root_.scala.Option#"4
¶Ø*_root_.uk.gov.hmrc.http.logging.RequestId#"7
¿Ã-_root_.uk.gov.hmrc.http.logging.RequestChain#"
◊€_root_.scala.Long#"#
ÎÓ_root_.scala.package.Seq#"
Ôı_root_.scala.Tuple2#"%
ˆ¸_root_.scala.Predef.String#"%
˛Ñ_root_.scala.Predef.String#"
ñú_root_.scala.Option#"%
ù£_root_.scala.Predef.String#"
∂º_root_.scala.Option#"%
Ω√_root_.scala.Predef.String#"
œ’_root_.scala.Option#"%
÷‹_root_.scala.Predef.String#"
ÈÔ_root_.scala.Option#"%
ˆ_root_.scala.Predef.String#"
Éâ_root_.scala.Option#"%
äê_root_.scala.Predef.String#"
•´_root_.scala.Option#";
¨º1_root_.uk.gov.hmrc.http.logging.AkamaiReputation#"#
Õ–_root_.scala.package.Seq#"
—◊_root_.scala.Tuple2#"%
ÿﬁ_root_.scala.Predef.String#"%
‡Ê_root_.scala.Predef.String#"0
Î¯&_root_.uk.gov.hmrc.http.HeaderCarrier#"ª
M_root_.utils.StubIdentityVerification.stubFailedJourney(Ljava/lang/String;)V.jstubFailedJourney(id: String): Unit"#
_root_.scala.Predef.String#"
_root_.scala.Unit#"&
_root_.scala.Boolean#Ä†Boolean"-
_root_.scala.concurrent.ÄàÄ
concurrent"œ
Ö_root_.utils.StubIdentityVerification.verifySuccess(Ljava/lang/String;Luk/gov/hmrc/http/HeaderCarrier;)Lscala/concurrent/Future;.(hc)EÄÅ hcHeaderCarrier",
&_root_.uk.gov.hmrc.http.HeaderCarrier#"
_root_.scala.Boolean#`&&`(Z)Z.]ÑÄ&&(x: Boolean): Boolean"
_root_.scala.Boolean#"
_root_.scala.Boolean#"<
 _root_.utils.StubServicesConfig.ÄÑStubServicesConfig"á
Q_root_.utils.StubIdentityVerification.stubFailedJourney(Ljava/lang/String;)V.(id)2ÄidString"!
_root_.scala.Predef.String#"
_root_.utils.ÄàÄutils">
&_root_.uk.gov.hmrc.http.HeaderCarrier#Ä†ÄHeaderCarrier"√
Q_root_.utils.StubIdentityVerification.stubSuccessfulJourney(Ljava/lang/String;)V.nstubSuccessfulJourney(id: String): Unit"#
_root_.scala.Predef.String#"
_root_.scala.Unit#"
_root_.scala.ÄàÄscala"Ü
I_root_.utils.StubIdentityVerification.`journeyResult_=`(Lscala/Tuple2;)V.∏ÇÄjourneyResult_=#(x$1: Tuple2[String, String]): Unit"
_root_.scala.Tuple2#" 
_root_.java.lang.String#" 
_root_.java.lang.String#"
#_root_.scala.Unit#"H
&_root_.utils.StubIdentityVerification.ÄÑStubIdentityVerification""
_root_.uk.gov.hmrc.ÄàÄhmrc2B
”	”	
*[Boolean]
_star_.
	_root_.scala.Boolean#:Scala211Bö
/*
 * Copyright 2017 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package utils

import connectors.IdentityVerification
import org.scalatest.mockito.MockitoSugar

import scala.concurrent.Future
import uk.gov.hmrc.http.HeaderCarrier

object StubIdentityVerification extends IdentityVerification(StubServicesConfig, null, StubHttp) with MockitoSugar {

  private var journeyResult = ("", "")

  def stubSuccessfulJourney(id: String) = journeyResult = (id, "Success")
  def stubFailedJourney(id: String) = journeyResult = (id, "FailedIV")
  def reset() = journeyResult = ("", "")

  override def verifySuccess(journeyId: String)(implicit hc: HeaderCarrier): Future[Boolean] = {
    Future.successful(journeyResult._1 == journeyId && journeyResult._2 == "Success")
  }
}
J)test/utils/StubIdentityVerification.scala